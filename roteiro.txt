CPU profile

-> Escrever código ruim [demo1]

-> Extrair profile manual
   -> runtime/pprof

-> Analisar profile
   -> interactive
   -> web
   -> callgrind
      -> brew install qcachegrind

-> Escrever benchmark [demo2]
   -> Extrair profile do benchmark com go test -cpuprofile cpu.out -bench .
   -> Como testar também com o benchmark (StopTimer, StartTimer)
   -> Analisar profile do benchmark
   -> Salvar output do benchmark para comparação futura

$ go test -bench . -cpuprofile cpu.prof
testing: warning: no tests to run
BenchmarkOrderedListInsert-4      200000       1065027 ns/op
PASS
ok      github.com/cezarsa/perf 213.182s


-> Reescrever código, menos ruim, mas ainda ruim. [demo3]
-> Nova rodada de benchmark

$ go test -bench . -cpuprofile cpu.prof
BenchmarkOrderedListInsert-4      100000        169606 ns/op
PASS
ok      github.com/cezarsa/perf 17.141s

-> Comparar benchmark
   -> go get golang.org/x/tools/cmd/benchcmp

$ benchcmp before.txt after.txt
benchmark                        old ns/op     new ns/op     delta
BenchmarkOrderedListInsert-4     1065027       169606        -84.07%

-> Analisar novo profile
   -> Nada de útil, e agora?

--- Desvio no caminho ---

-> Transformar em app web [demo4]
-> Usar net/http/pprof
-> Rodar wrk e fazer profiling cpu
   -> Nada de útil novamente

--- Heap profiling ---

-> 4 em 1. falar dos dois tipos, alloc e inuse
   -> inuse_space
   -> inuse_objects
   -> alloc_space
   -> alloc_objects

-> Rodar benchmark novamente com -benchmem

$ go test -bench . -benchmem -memprofile mem.prof
BenchmarkOrderedListInsert-4      100000        176810 ns/op      629950 B/op          1 allocs/op
PASS
ok      github.com/cezarsa/perf 17.879s

-> Analisar profile
   -> Nada útil (tudo 0???)
   -> -alloc_space

-> Mudar para uma só alocação com tudo [demo5]

-> Rodar novamente benchmark

$ go test -bench . -benchmem -memprofile mem.prof
BenchmarkOrderedListInsert-4      100000        135605 ns/op      403980 B/op          1 allocs/op
PASS
ok      github.com/cezarsa/perf 13.702s

-> Geralmente melhoria em quantidade de alocada se traduz em melhoria de performance também
   -> Isso NÃO é regra
   -> Refazer o código do jeito mais simples possível (append e sort.Ints()) [demo6]

-> Mostrar como extrair novo profile usando a rota /debug/pprof/heap [demo7]
   -> Não precisa estar com atividade no servidor para pegar
   -> Agora o inuse_space é útil
   -> ?gc=1
      -> útil só para o inuse_, não afeta o alloc

-> Rodar wrk e comparar profiles, -base
   -> Extremamente útil para encontrar leaks

-> Rodar novamente alloc_space, comparar o alocado com o em uso. O resto é lixo.
   -> Tentar melhorar mais

-> Nova versão, teoricamente a melhor, mas... [demo8]
   -> Prof de mem não parece muito útil, pouco alocado
   -> Prof de cpu mostra memmove
   -> Idéias de porque é pior? (cache processador)

--- Novo exemplo ---

-> Buffer grande em memória [demo9]
-> Profiling rodando nova rota
   -> cpu, nada útil, tempo maior é no Random
   -> mem, nenhum leak, mas uma grande quantidade de mem alocada

-> Criar benchmark
   -> Profile do benchmark, semelhante ao da rota

-> Mudar para alocar buffer fixo 10k [demo10]
-> Benchmark e profile
   -> Benchmark melhor, menos alocs, maior performance

-> Mudar para usar sync.Pool [demo11]
   -> Quase 0 allocs, maior performance, threadsafe
